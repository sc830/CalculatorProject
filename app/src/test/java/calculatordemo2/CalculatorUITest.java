/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculatordemo2;

import java.awt.event.ActionEvent;
import javax.swing.JTextArea;
import org.junit.jupiter.api.Test;

import calculatordemo2.Calculator.twoOperator;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
// import java.lang.reflect.Field;  // This brings in the Field feature of Java Reflection

class CalculatorUITest {

    private static CalculatorUI classUnderTest;

    @BeforeEach
    public void setUp() {
        classUnderTest = new CalculatorUI();
    }

    @DisplayName("Testing that writer writes the display: assumes public fields")
    @Test
    public void writerSetText() {
        JTextArea textAreaUnderTest = classUnderTest.text;
        Double numberToWrite = 22.2;
        classUnderTest.writer(numberToWrite);
        // Test that the value of “text” is “mytext”
        assertEquals(numberToWrite.toString(), textAreaUnderTest.getText());
    }

    @DisplayName("Testing that reader accurately reads text")
    @Test
    public void readerGetText() {
        JTextArea textAreaUnderTest = classUnderTest.text;
        Double value = 10.0;
        Double read = 0.0;
        textAreaUnderTest.setText(value.toString());
        read = classUnderTest.reader();
        // test that value from reader() == value
        assertEquals(read, value);
    }

    @DisplayName("Testing Button[0] writes zero to display: assumes public fields ")
    @Test
    public void writeZeroToDisplay() {
       
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("0"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        String expectedDisplayText = "0";
        String actualDisplayText = classUnderTest.text.getText();
        assertEquals(expectedDisplayText,actualDisplayText);
    }

    @DisplayName("Testing Button[7] writes zero to display: assumes public fields ")
    @Test
    public void writeSevenToDisplay() {
       
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("7"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        String expectedDisplayText = "7";
        String actualDisplayText = classUnderTest.text.getText();
        assertEquals(expectedDisplayText,actualDisplayText);
    }

    @DisplayName("Testing that button press after entering first # and operator only shows new #: assumes public fields ")
    @Test
    public void writeSecondNumberToDisplay() {
       
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("7"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("-"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("2"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        String expectedDisplayText = "2";
        String actualDisplayText = classUnderTest.text.getText();
        assertEquals(expectedDisplayText,actualDisplayText);
    }

    @DisplayName("Testing button press sets num1 correctly: assumes public fields ")
    @Test
    public void setNum1to9() {
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("9"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("="), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        Double expected = 9.0;
        Double actual = classUnderTest.calc.num1;
        assertEquals(expected,actual);
    }

    @DisplayName("Testing sequential button presses set num2 correctly: assumes public fields ")
    @Test
    public void setNum2to4() {
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("9"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("+"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("4"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("="), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        Double expected = 4.0;
        Double actual = classUnderTest.calc.num2;
        assertEquals(expected,actual);
    }

    @DisplayName("Testing C button clears display: assumes public fields ")
    @Test
    public void clearDisplay() {
       
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("8"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("C"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        String expectedDisplayText = "";
        String actualDisplayText = classUnderTest.text.getText();
        assertEquals(expectedDisplayText,actualDisplayText);
    }

    @DisplayName("Testing that selecting + operator changes twoOperator mode to add: assumes public fields ")
    @Test
    public void modeChangeTest() {
       
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("8"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("+"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        twoOperator expected = twoOperator.add;
        twoOperator actual = classUnderTest.calc.mode;
        assertEquals(expected,actual);
    }

    @DisplayName("Testing sequential button presses: assumes public fields ")
    @Test
    public void testMultiple() {
       
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("3"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        classUnderTest.actionPerformed(e);
        classUnderTest.actionPerformed(e);
        classUnderTest.actionPerformed(e);
        String expected = "3333";
        String actual = classUnderTest.text.getText();
        assertEquals(expected,actual);
    }

    @DisplayName("Testing that pressing primitive operator clears display: assumes public fields ")
    @Test
    public void operatorClearsDisplay() {
       
        ActionEvent e = new ActionEvent(classUnderTest.buttonMaster.get("9"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        e = new ActionEvent(classUnderTest.buttonMaster.get("/"), 
                                        ActionEvent.ACTION_PERFORMED, 
                                        "");
        classUnderTest.actionPerformed(e);
        String expected = "";
        String actual = classUnderTest.text.getText();
        assertEquals(expected,actual);
    }

    
    
    @Test 
    void appPanelIsCreated() {
        assertNotNull(classUnderTest, "app should have a panel object");
    }
}

